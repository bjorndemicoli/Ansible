# .bashrc

case $- in
    *i*) ;;
      *) return;;
esac

shopt -s histappend
HISTCONTROL=ignoreboth
HISTSIZE=10000
HISTFILESIZE=500000

# Archive extracting
function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias nstatus='netstat -antplF'
alias tree='tree -Csuh'

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

function welcome() {
   local df_out=()
    local line
    while read line; do
        df_out+=("$line")
    done < <(df -h /)
    local rst="$(tput sgr0)"
    local fgblk="${rst}$(tput setaf 0)" # Black
    local fgred="${rst}$(tput setaf 1)" # Red
    local fggrn="${rst}$(tput setaf 2)" # Green
    local fgylw="${rst}$(tput setaf 3)" # Yellow
    local fgblu="${rst}$(tput setaf 4)" # Blue
    local fgpur="${rst}$(tput setaf 5)" # Purple
    local fgwht="${rst}$(tput setaf 7)" # White
    local who_out=()
    while read line; do
        who_out+=("$line\n")
    done < <(who | awk '{print $1 " " $2 " " $5}')
    echo -e "\n ${fggrn} Welcome to ${fgpur}$(hostname -s) / $(ip route get 8.8.8.8 2>/dev/null | head -1 | cut -d' ' -f7)\n"
    echo "${fgblu}  #  ${fggrn}$(date +"%A, %e %B %Y, %r")"
    echo -e "${fgblu}  #  ${fggrn}$(uname -srmo) \n"
    echo "${fgblu}  #  ${fgylw}${df_out[0]}"
    echo -e "${fgblu}  #  ${fgwht}${df_out[1]}\n"
    echo "${fgblu}  #  ${fgred}Load..........: ${fggrn}$(cat /proc/loadavg | awk {'print $1 " " $2 " " $3'})"
    echo -e "${fgblu}  #  ${fgred}Uptime........: ${fgylw}$(/usr/bin/cut -d. -f1 /proc/uptime | awk {'print int($1/86400)'}) day(s)"
    echo "${fgblu}  #  ${fgred}Memory........: ${fggrn}$(grep MemAvailable /proc/meminfo | awk {'print $2/1024'})MB (Free) ${fgpur}/ ${fggrn}$(grep MemTotal /proc/meminfo | awk {'print $2/1024'})MB (Total)"
    echo "${fgblu}  #  ${fgred}Processes.....: ${fgylw}$(ps ax | wc -l | tr -d " ")"
    echo -e "${fgblu}  #  ${fgred}Users online..: ${fggrn}${who_out[0]/\\n}"
    unset "who_out[0]"
    for line in "${who_out[@]}"; do echo -e "                     ${line/\\n}"; done
    echo -e "\n"
}
welcome

PS1="\[\e[00;33m\]\u\[\e[0m\]\[\e[00;37m\]@\h:\[\e[0m\]\[\e[00;32m\][\w]\[\e[0m\]\[\e[00;37m\]\\$ \[\e[0m\]"
