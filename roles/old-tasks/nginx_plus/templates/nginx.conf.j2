# {{ ansible_managed }}
user  {{ nginx_user }};

worker_processes {{ nginx_worker_processes | default('auto') }};
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
worker_rlimit_nofile 40960;

events {
    worker_connections {{ nginx_worker_connections }};
}

include 	{{ nginx_conf_path }};

http {
    log_format  main_old  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" $http_x_forwarded_for';

        log_format  main_upstream  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" $http_x_forwarded_for $upstream_addr';

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$host" sn="$server_name" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" ul="$upstream_response_length" '
                        'cs=$upstream_cache_status cl="$content_length"';
log_format referer_only '$http_referer';



    #access_log  /var/log/nginx/access.log;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;




include /etc/nginx/sites-enabled/{{ nginx_conf_subpath }};
include /etc/nginx/status.conf;


        ############ Generic settings ############
        server_names_hash_bucket_size  128;  #to handle long domain names
# Securing SSL
        server_tokens off;
        ssl_dhparam /etc/nginx/ssl/dhparam_2048.pem;
        client_max_body_size 100m;
        ssl_prefer_server_ciphers On;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS;

############ SSL default certificates ############
        ssl_certificate /etc/nginx/ssl/wildcard.igamingcloud.com-2020-chained.cer;
        ssl_certificate_key /etc/nginx/ssl/wildcard.igamingcloud.com-2018.key;


        ############ Gzip ############
        gzip on;
        gzip_disable "msie6";
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        
        ############ Re-Write rule ############
        server {
        listen 80;
        server_name ~.*;
        return 301 https://$request_uri;
    }
        upstream * {
                zone upstream-backend 64k;
        }
        ############ Default server ############
        server {
                listen 443 default_server;
                ssl on;
                ssl_session_timeout 20m;
        client_max_body_size 100m;
############ SSL default certificates ############
        ssl_certificate /etc/nginx/ssl/wildcard.igamingcloud.com-2020-chained.cer;
        ssl_certificate_key /etc/nginx/ssl/wildcard.igamingcloud.com-2018.key;
                root /etc/nginx/default;
                proxy_read_timeout 120;
                proxy_pass_header Date;
                proxy_pass_header Server;
                location / {
                        include sites-includes/{{ nginx_conf_env }};
                        index igcdefault.html;
                }
location /upstream_conf {
        upstream_conf;
}

location /nginx_status {
        # Turn on nginx stats
        stub_status on;
        # I do not need logs for stats
        access_log   off;
        # Security: Only allow access from 192.168.1.100 IP #
        allow 10.0.0.0/8;
	allow 127.0.0.1;
# Send rest of the world to /dev/null #
        deny all;
   }


location /nginx_conn_active {
    return 200 [$connections_active];
}
location /nginx_conn_waiting {
        return 200 [$connections_waiting];
}
location /nginx_conn_reading {
        return 200 [$connections_reading];
}
location /nginx_conn_writing {
        return 200 [$connections_writing];
}
#location /status {
#allow 10.0.0.0/16;
#deny all;
#status;
#}
}

}